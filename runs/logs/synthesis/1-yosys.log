
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4052 (git sha1 d061b0e, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openLANE_flow/designs/dvsd_8216m3/src/dvsd_8216m3.v
Parsing SystemVerilog input from `/openLANE_flow/designs/dvsd_8216m3/src/dvsd_8216m3.v' to AST representation.
Generating RTLIL representation for module `\dvsd_8216m3'.
Generating RTLIL representation for module `\halfadder'.
Generating RTLIL representation for module `\compressor3to2'.
Generating RTLIL representation for module `\and1b'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/dvsd_8216m3/runs/final_run/tmp/synthesis/hierarchy.dot'.
Dumping module dvsd_8216m3 to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \dvsd_8216m3
Used module:     \compressor3to2
Used module:     \halfadder
Used module:     \and1b

3.2. Analyzing design hierarchy..
Top module:  \dvsd_8216m3
Used module:     \compressor3to2
Used module:     \halfadder
Used module:     \and1b
Removed 0 unused modules.
Mapping positional arguments of cell dvsd_8216m3.CMP48 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP47 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP46 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP45 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP44 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP43 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP42 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP41 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP40 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP39 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP38 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP37 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP36 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.HA8 (halfadder).
Mapping positional arguments of cell dvsd_8216m3.CMP35 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP34 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP33 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP32 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP31 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP30 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP29 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP28 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP27 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP26 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP25 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.HA7 (halfadder).
Mapping positional arguments of cell dvsd_8216m3.CMP24 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP23 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP22 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP21 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP20 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP19 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP18 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP17 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP16 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.HA6 (halfadder).
Mapping positional arguments of cell dvsd_8216m3.CMP15 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP14 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP13 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP12 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP11 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP10 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP9 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP8 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP7 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP6 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.CMP5 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.HA5 (halfadder).
Mapping positional arguments of cell dvsd_8216m3.CMP4 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.HA4 (halfadder).
Mapping positional arguments of cell dvsd_8216m3.CMP3 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.HA3 (halfadder).
Mapping positional arguments of cell dvsd_8216m3.CMP2 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.HA2 (halfadder).
Mapping positional arguments of cell dvsd_8216m3.CMP1 (compressor3to2).
Mapping positional arguments of cell dvsd_8216m3.HA1 (halfadder).
Mapping positional arguments of cell dvsd_8216m3.AND63 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND62 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND61 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND60 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND59 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND58 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND57 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND56 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND55 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND54 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND53 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND52 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND51 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND50 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND49 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND48 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND47 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND46 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND45 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND44 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND43 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND42 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND41 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND40 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND39 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND38 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND37 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND36 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND35 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND34 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND33 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND32 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND31 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND30 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND29 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND28 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND27 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND26 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND25 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND24 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND23 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND22 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND21 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND20 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND19 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND18 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND17 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND16 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND15 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND14 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND13 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND12 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND11 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND10 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND9 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND8 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND7 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND6 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND5 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND4 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND3 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND2 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND1 (and1b).
Mapping positional arguments of cell dvsd_8216m3.AND0 (and1b).

4. Executing TRIBUF pass.

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \dvsd_8216m3
Used module:     \compressor3to2
Used module:     \halfadder
Used module:     \and1b

5.1.2. Analyzing design hierarchy..
Top module:  \dvsd_8216m3
Used module:     \compressor3to2
Used module:     \halfadder
Used module:     \and1b
Removed 0 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

5.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

5.2.4. Executing PROC_INIT pass (extract init attributes).

5.2.5. Executing PROC_ARST pass (detect async resets in processes).

5.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

5.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

5.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

5.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.3. Executing FLATTEN pass (flatten design).
Deleting now unused module and1b.
Deleting now unused module compressor3to2.
Deleting now unused module halfadder.
<suppressed ~120 debug messages>

5.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m3.

5.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m3..
Removed 1 unused cells and 178 unused wires.
<suppressed ~4 debug messages>

5.6. Executing CHECK pass (checking for obvious problems).
Checking module dvsd_8216m3...
Found and reported 0 problems.

5.7. Executing OPT pass (performing simple optimizations).

5.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m3.

5.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m3'.
<suppressed ~291 debug messages>
Removed a total of 97 cells.

5.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_8216m3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_8216m3.
Performed a total of 0 changes.

5.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m3'.
Removed a total of 0 cells.

5.7.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m3..
Removed 0 unused cells and 97 unused wires.
<suppressed ~1 debug messages>

5.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m3.

5.7.9. Rerunning OPT passes. (Maybe there is more to do..)

5.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_8216m3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_8216m3.
Performed a total of 0 changes.

5.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m3'.
Removed a total of 0 cells.

5.7.13. Executing OPT_DFF pass (perform DFF optimizations).

5.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m3..

5.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m3.

5.7.16. Finished OPT passes. (There is nothing left to do.)

5.8. Executing FSM pass (extract and optimize FSM).

5.8.1. Executing FSM_DETECT pass (finding FSMs in design).

5.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m3..

5.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.9. Executing OPT pass (performing simple optimizations).

5.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m3.

5.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m3'.
Removed a total of 0 cells.

5.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_8216m3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_8216m3.
Performed a total of 0 changes.

5.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m3'.
Removed a total of 0 cells.

5.9.6. Executing OPT_DFF pass (perform DFF optimizations).

5.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m3..

5.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m3.

5.9.9. Finished OPT passes. (There is nothing left to do.)

5.10. Executing WREDUCE pass (reducing word size of cells).

5.11. Executing PEEPOPT pass (run peephole optimizers).

5.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m3..

5.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module dvsd_8216m3:
  created 0 $alu and 0 $macc cells.

5.14. Executing SHARE pass (SAT-based resource sharing).

5.15. Executing OPT pass (performing simple optimizations).

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m3.

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m3'.
Removed a total of 0 cells.

5.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_8216m3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_8216m3.
Performed a total of 0 changes.

5.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m3'.
Removed a total of 0 cells.

5.15.6. Executing OPT_DFF pass (perform DFF optimizations).

5.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m3..

5.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m3.

5.15.9. Finished OPT passes. (There is nothing left to do.)

5.16. Executing MEMORY pass.

5.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.16.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.16.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m3..

5.16.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m3..

5.16.6. Executing MEMORY_COLLECT pass (generating $mem cells).

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m3..

5.18. Executing OPT pass (performing simple optimizations).

5.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m3.

5.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m3'.
Removed a total of 0 cells.

5.18.3. Executing OPT_DFF pass (perform DFF optimizations).

5.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m3..

5.18.5. Finished fast OPT passes.

5.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

5.20. Executing OPT pass (performing simple optimizations).

5.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m3.

5.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m3'.
Removed a total of 0 cells.

5.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_8216m3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_8216m3.
Performed a total of 0 changes.

5.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m3'.
Removed a total of 0 cells.

5.20.6. Executing OPT_SHARE pass.

5.20.7. Executing OPT_DFF pass (perform DFF optimizations).

5.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m3..

5.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m3.

5.20.10. Finished OPT passes. (There is nothing left to do.)

5.21. Executing TECHMAP pass (map to technology primitives).

5.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~577 debug messages>

5.22. Executing OPT pass (performing simple optimizations).

5.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m3.

5.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m3'.
Removed a total of 0 cells.

5.22.3. Executing OPT_DFF pass (perform DFF optimizations).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m3..

5.22.5. Finished fast OPT passes.

5.23. Executing ABC pass (technology mapping using ABC).

5.23.1. Extracting gate netlist of module `\dvsd_8216m3' to `<abc-temp-dir>/input.blif'..
Extracted 510 gates and 526 wires to a netlist network with 16 inputs and 16 outputs.

5.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       54
ABC RESULTS:            ANDNOT cells:       78
ABC RESULTS:              NAND cells:       22
ABC RESULTS:               NOR cells:       35
ABC RESULTS:               NOT cells:        5
ABC RESULTS:                OR cells:       22
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              XNOR cells:       26
ABC RESULTS:               XOR cells:       78
ABC RESULTS:        internal signals:      494
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       16
Removing temp directory.

5.24. Executing OPT pass (performing simple optimizations).

5.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m3.

5.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m3'.
Removed a total of 0 cells.

5.24.3. Executing OPT_DFF pass (perform DFF optimizations).

5.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m3..
Removed 0 unused cells and 845 unused wires.
<suppressed ~479 debug messages>

5.24.5. Finished fast OPT passes.

5.25. Executing HIERARCHY pass (managing design hierarchy).

5.25.1. Analyzing design hierarchy..
Top module:  \dvsd_8216m3

5.25.2. Analyzing design hierarchy..
Top module:  \dvsd_8216m3
Removed 0 unused modules.

5.26. Printing statistics.

=== dvsd_8216m3 ===

   Number of wires:                471
   Number of wire bits:            500
   Number of public wires:         163
   Number of public wire bits:     192
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                324
     $_ANDNOT_                      78
     $_AND_                         54
     $_NAND_                        22
     $_NOR_                         35
     $_NOT_                          5
     $_ORNOT_                        4
     $_OR_                          22
     $_XNOR_                        26
     $_XOR_                         78

5.27. Executing CHECK pass (checking for obvious problems).
Checking module dvsd_8216m3...
Found and reported 0 problems.

6. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/dvsd_8216m3/runs/final_run/tmp/synthesis/post_techmap.dot'.
Dumping module dvsd_8216m3 to page 1.

7. Executing SHARE pass (SAT-based resource sharing).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m3.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m3'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_8216m3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_8216m3.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m3'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m3..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m3.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m3..
Removed 0 unused cells and 144 unused wires.
<suppressed ~144 debug messages>

10. Printing statistics.

=== dvsd_8216m3 ===

   Number of wires:                327
   Number of wire bits:            356
   Number of public wires:          19
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                324
     $_ANDNOT_                      78
     $_AND_                         54
     $_NAND_                        22
     $_NOR_                         35
     $_NOT_                          5
     $_ORNOT_                        4
     $_OR_                          22
     $_XNOR_                        26
     $_XOR_                         78

mapping tbuf

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: /home/drako/applications/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/drako/applications/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

12. Executing SIMPLEMAP pass (map simple cells to gate primitives).

13. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module dvsd_8216m3..
  Treeifying 0 MUXes:
    Finished treeification: Found 0 trees.
  Covering trees:
  Added a total of 0 decoder MUXes.
<suppressed ~1 debug messages>

14. Executing TECHMAP pass (map to technology primitives).

14.1. Executing Verilog-2005 frontend: /home/drako/applications/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v
Parsing Verilog input from `/home/drako/applications/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX4_'.
Successfully finished Verilog frontend.

14.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

15. Executing SIMPLEMAP pass (map simple cells to gate primitives).

16. Executing TECHMAP pass (map to technology primitives).

16.1. Executing Verilog-2005 frontend: /home/drako/applications/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v
Parsing Verilog input from `/home/drako/applications/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX_'.
Successfully finished Verilog frontend.

16.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

17. Executing SIMPLEMAP pass (map simple cells to gate primitives).

18. Executing TECHMAP pass (map to technology primitives).

18.1. Executing Verilog-2005 frontend: /home/drako/applications/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/drako/applications/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

19. Executing SIMPLEMAP pass (map simple cells to gate primitives).

20. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

20.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\dvsd_8216m3':

21. Printing statistics.

=== dvsd_8216m3 ===

   Number of wires:                327
   Number of wire bits:            356
   Number of public wires:          19
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                324
     $_ANDNOT_                      78
     $_AND_                         54
     $_NAND_                        22
     $_NOR_                         35
     $_NOT_                          5
     $_ORNOT_                        4
     $_OR_                          22
     $_XNOR_                        26
     $_XOR_                         78

[INFO]: ABC: WireLoad : S_4

22. Executing ABC pass (technology mapping using ABC).

22.1. Extracting gate netlist of module `\dvsd_8216m3' to `/tmp/yosys-abc-7cYMxV/input.blif'..
Extracted 324 gates and 340 wires to a netlist network with 16 inputs and 16 outputs.

22.1.1. Executing ABC.
Running ABC command: /build/bin/yosys-abc -s -f /tmp/yosys-abc-7cYMxV/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-7cYMxV/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-7cYMxV/input.blif 
ABC: + read_lib -w /openLANE_flow/designs/dvsd_8216m3/runs/final_run/tmp/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.14 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/openLANE_flow/designs/dvsd_8216m3/runs/final_run/tmp/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.20 sec
ABC: Memory =    7.77 MB. Time =     0.20 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openLANE_flow/designs/dvsd_8216m3/runs/final_run/tmp/synthesis/yosys.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_8".
ABC: Setting output load to be 17.650000.
ABC: + read_constr /openLANE_flow/designs/dvsd_8216m3/runs/final_run/tmp/synthesis/yosys.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 0 
ABC: + buffer -N 5 -S 0.0 
ABC: Node 56 has dup fanin 54.
ABC: Node 56 has dup fanin 55.
ABC: Node 56 has dup fanin 54.
ABC: Node 56 has dup fanin 55.
ABC: Node 57 has dup fanin 49.
ABC: Node 57 has dup fanin 56.
ABC: Node 57 has dup fanin 49.
ABC: Node 57 has dup fanin 56.
ABC: Node 64 has dup fanin 60.
ABC: Node 64 has dup fanin 63.
ABC: Node 64 has dup fanin 60.
ABC: Node 64 has dup fanin 63.
ABC: Node 65 has dup fanin 59.
ABC: Node 65 has dup fanin 64.
ABC: Node 65 has dup fanin 59.
ABC: Node 65 has dup fanin 64.
ABC: Node 66 has dup fanin 52.
ABC: Node 66 has dup fanin 65.
ABC: Node 66 has dup fanin 52.
ABC: Node 66 has dup fanin 65.
ABC: Node 67 has dup fanin 58.
ABC: Node 67 has dup fanin 66.
ABC: Node 67 has dup fanin 58.
ABC: Node 67 has dup fanin 66.
ABC: Node 81 has dup fanin 79.
ABC: Node 81 has dup fanin 80.
ABC: Node 81 has dup fanin 79.
ABC: Node 81 has dup fanin 80.
ABC: Node 82 has dup fanin 76.
ABC: Node 82 has dup fanin 81.
ABC: Node 82 has dup fanin 76.
ABC: Node 82 has dup fanin 81.
ABC: Node 83 has dup fanin 61.
ABC: Node 83 has dup fanin 82.
ABC: Node 83 has dup fanin 61.
ABC: Node 83 has dup fanin 82.
ABC: Node 84 has dup fanin 70.
ABC: Node 84 has dup fanin 83.
ABC: Node 84 has dup fanin 70.
ABC: Node 84 has dup fanin 83.
ABC: Node 85 has dup fanin 69.
ABC: Node 85 has dup fanin 84.
ABC: Node 85 has dup fanin 69.
ABC: Node 85 has dup fanin 84.
ABC: Node 86 has dup fanin 68.
ABC: Node 86 has dup fanin 85.
ABC: Node 86 has dup fanin 68.
ABC: Node 86 has dup fanin 85.
ABC: Node 98 has dup fanin 94.
ABC: Node 98 has dup fanin 97.
ABC: Node 98 has dup fanin 94.
ABC: Node 98 has dup fanin 97.
ABC: Node 99 has dup fanin 78.
ABC: Node 99 has dup fanin 98.
ABC: Node 99 has dup fanin 78.
ABC: Node 99 has dup fanin 98.
ABC: Node 100 has dup fanin 93.
ABC: Node 100 has dup fanin 99.
ABC: Node 100 has dup fanin 93.
ABC: Node 100 has dup fanin 99.
ABC: Node 101 has dup fanin 90.
ABC: Node 101 has dup fanin 100.
ABC: Node 101 has dup fanin 90.
ABC: Node 101 has dup fanin 100.
ABC: Node 102 has dup fanin 89.
ABC: Node 102 has dup fanin 101.
ABC: Node 102 has dup fanin 89.
ABC: Node 102 has dup fanin 101.
ABC: Node 103 has dup fanin 88.
ABC: Node 103 has dup fanin 102.
ABC: Node 103 has dup fanin 88.
ABC: Node 103 has dup fanin 102.
ABC: Node 104 has dup fanin 87.
ABC: Node 104 has dup fanin 103.
ABC: Node 104 has dup fanin 87.
ABC: Node 104 has dup fanin 103.
ABC: Node 111 has dup fanin 107.
ABC: Node 111 has dup fanin 110.
ABC: Node 111 has dup fanin 107.
ABC: Node 111 has dup fanin 110.
ABC: Node 118 has dup fanin 114.
ABC: Node 118 has dup fanin 117.
ABC: Node 118 has dup fanin 114.
ABC: Node 118 has dup fanin 117.
ABC: Node 119 has dup fanin 113.
ABC: Node 119 has dup fanin 118.
ABC: Node 119 has dup fanin 113.
ABC: Node 119 has dup fanin 118.
ABC: Node 121 has dup fanin 91.
ABC: Node 121 has dup fanin 120.
ABC: Node 121 has dup fanin 91.
ABC: Node 121 has dup fanin 120.
ABC: Node 122 has dup fanin 119.
ABC: Node 122 has dup fanin 121.
ABC: Node 122 has dup fanin 119.
ABC: Node 122 has dup fanin 121.
ABC: Node 123 has dup fanin 112.
ABC: Node 123 has dup fanin 122.
ABC: Node 123 has dup fanin 112.
ABC: Node 123 has dup fanin 122.
ABC: Node 124 has dup fanin 111.
ABC: Node 124 has dup fanin 123.
ABC: Node 124 has dup fanin 111.
ABC: Node 124 has dup fanin 123.
ABC: Node 125 has dup fanin 106.
ABC: Node 125 has dup fanin 124.
ABC: Node 125 has dup fanin 106.
ABC: Node 125 has dup fanin 124.
ABC: Node 126 has dup fanin 105.
ABC: Node 126 has dup fanin 125.
ABC: Node 126 has dup fanin 105.
ABC: Node 126 has dup fanin 125.
ABC: Node 133 has dup fanin 131.
ABC: Node 133 has dup fanin 132.
ABC: Node 133 has dup fanin 131.
ABC: Node 133 has dup fanin 132.
ABC: Node 142 has dup fanin 140.
ABC: Node 142 has dup fanin 141.
ABC: Node 142 has dup fanin 140.
ABC: Node 142 has dup fanin 141.
ABC: Node 143 has dup fanin 116.
ABC: Node 143 has dup fanin 142.
ABC: Node 143 has dup fanin 116.
ABC: Node 143 has dup fanin 142.
ABC: Node 144 has dup fanin 137.
ABC: Node 144 has dup fanin 143.
ABC: Node 144 has dup fanin 137.
ABC: Node 144 has dup fanin 143.
ABC: Node 147 has dup fanin 145.
ABC: Node 147 has dup fanin 146.
ABC: Node 147 has dup fanin 145.
ABC: Node 147 has dup fanin 146.
ABC: Node 148 has dup fanin 144.
ABC: Node 148 has dup fanin 147.
ABC: Node 148 has dup fanin 144.
ABC: Node 148 has dup fanin 147.
ABC: Node 149 has dup fanin 134.
ABC: Node 149 has dup fanin 148.
ABC: Node 149 has dup fanin 134.
ABC: Node 149 has dup fanin 148.
ABC: Node 150 has dup fanin 133.
ABC: Node 150 has dup fanin 149.
ABC: Node 150 has dup fanin 133.
ABC: Node 150 has dup fanin 149.
ABC: Node 151 has dup fanin 128.
ABC: Node 151 has dup fanin 150.
ABC: Node 151 has dup fanin 128.
ABC: Node 151 has dup fanin 150.
ABC: Node 152 has dup fanin 127.
ABC: Node 152 has dup fanin 151.
ABC: Node 152 has dup fanin 127.
ABC: Node 152 has dup fanin 151.
ABC: Node 161 has dup fanin 159.
ABC: Node 161 has dup fanin 160.
ABC: Node 161 has dup fanin 159.
ABC: Node 161 has dup fanin 160.
ABC: Node 172 has dup fanin 136.
ABC: Node 172 has dup fanin 171.
ABC: Node 172 has dup fanin 136.
ABC: Node 172 has dup fanin 171.
ABC: Node 173 has dup fanin 170.
ABC: Node 173 has dup fanin 172.
ABC: Node 173 has dup fanin 170.
ABC: Node 173 has dup fanin 172.
ABC: Node 176 has dup fanin 174.
ABC: Node 176 has dup fanin 175.
ABC: Node 176 has dup fanin 174.
ABC: Node 176 has dup fanin 175.
ABC: Node 177 has dup fanin 173.
ABC: Node 177 has dup fanin 176.
ABC: Node 177 has dup fanin 173.
ABC: Node 177 has dup fanin 176.
ABC: Node 178 has dup fanin 167.
ABC: Node 178 has dup fanin 177.
ABC: Node 178 has dup fanin 167.
ABC: Node 178 has dup fanin 177.
ABC: Node 179 has dup fanin 166.
ABC: Node 179 has dup fanin 178.
ABC: Node 179 has dup fanin 166.
ABC: Node 179 has dup fanin 178.
ABC: Node 180 has dup fanin 154.
ABC: Node 180 has dup fanin 179.
ABC: Node 180 has dup fanin 154.
ABC: Node 180 has dup fanin 179.
ABC: Node 181 has dup fanin 153.
ABC: Node 181 has dup fanin 180.
ABC: Node 181 has dup fanin 153.
ABC: Node 181 has dup fanin 180.
ABC: Node 187 has dup fanin 185.
ABC: Node 187 has dup fanin 186.
ABC: Node 187 has dup fanin 185.
ABC: Node 187 has dup fanin 186.
ABC: Node 196 has dup fanin 169.
ABC: Node 196 has dup fanin 195.
ABC: Node 196 has dup fanin 169.
ABC: Node 196 has dup fanin 195.
ABC: Node 197 has dup fanin 194.
ABC: Node 197 has dup fanin 196.
ABC: Node 197 has dup fanin 194.
ABC: Node 197 has dup fanin 196.
ABC: Node 200 has dup fanin 198.
ABC: Node 200 has dup fanin 199.
ABC: Node 200 has dup fanin 198.
ABC: Node 200 has dup fanin 199.
ABC: Node 201 has dup fanin 197.
ABC: Node 201 has dup fanin 200.
ABC: Node 201 has dup fanin 197.
ABC: Node 201 has dup fanin 200.
ABC: Node 202 has dup fanin 188.
ABC: Node 202 has dup fanin 201.
ABC: Node 202 has dup fanin 188.
ABC: Node 202 has dup fanin 201.
ABC: Node 203 has dup fanin 187.
ABC: Node 203 has dup fanin 202.
ABC: Node 203 has dup fanin 187.
ABC: Node 203 has dup fanin 202.
ABC: Node 204 has dup fanin 182.
ABC: Node 204 has dup fanin 203.
ABC: Node 204 has dup fanin 182.
ABC: Node 204 has dup fanin 203.
ABC: Node 206 has dup fanin 204.
ABC: Node 206 has dup fanin 205.
ABC: Node 206 has dup fanin 204.
ABC: Node 206 has dup fanin 205.
ABC: Node 212 has dup fanin 210.
ABC: Node 212 has dup fanin 211.
ABC: Node 212 has dup fanin 210.
ABC: Node 212 has dup fanin 211.
ABC: Node 223 has dup fanin 221.
ABC: Node 223 has dup fanin 222.
ABC: Node 223 has dup fanin 221.
ABC: Node 223 has dup fanin 222.
ABC: Node 224 has dup fanin 220.
ABC: Node 224 has dup fanin 223.
ABC: Node 224 has dup fanin 220.
ABC: Node 224 has dup fanin 223.
ABC: Node 225 has dup fanin 213.
ABC: Node 225 has dup fanin 224.
ABC: Node 225 has dup fanin 213.
ABC: Node 225 has dup fanin 224.
ABC: Node 226 has dup fanin 212.
ABC: Node 226 has dup fanin 225.
ABC: Node 226 has dup fanin 212.
ABC: Node 226 has dup fanin 225.
ABC: Node 227 has dup fanin 207.
ABC: Node 227 has dup fanin 226.
ABC: Node 227 has dup fanin 207.
ABC: Node 227 has dup fanin 226.
ABC: Node 229 has dup fanin 227.
ABC: Node 229 has dup fanin 228.
ABC: Node 229 has dup fanin 227.
ABC: Node 229 has dup fanin 228.
ABC: Node 238 has dup fanin 76.
ABC: Node 238 has dup fanin 237.
ABC: Node 238 has dup fanin 76.
ABC: Node 238 has dup fanin 237.
ABC: Node 239 has dup fanin 232.
ABC: Node 239 has dup fanin 238.
ABC: Node 239 has dup fanin 232.
ABC: Node 239 has dup fanin 238.
ABC: Node 246 has dup fanin 244.
ABC: Node 246 has dup fanin 245.
ABC: Node 246 has dup fanin 244.
ABC: Node 246 has dup fanin 245.
ABC: Node 257 has dup fanin 249.
ABC: Node 257 has dup fanin 256.
ABC: Node 257 has dup fanin 249.
ABC: Node 257 has dup fanin 256.
ABC: Node 264 has dup fanin 262.
ABC: Node 264 has dup fanin 263.
ABC: Node 264 has dup fanin 262.
ABC: Node 264 has dup fanin 263.
ABC: Node 273 has dup fanin 265.
ABC: Node 273 has dup fanin 272.
ABC: Node 273 has dup fanin 265.
ABC: Node 273 has dup fanin 272.
ABC: Node 275 has dup fanin 273.
ABC: Node 275 has dup fanin 274.
ABC: Node 275 has dup fanin 273.
ABC: Node 275 has dup fanin 274.
ABC: Node 279 has dup fanin 277.
ABC: Node 279 has dup fanin 278.
ABC: Node 279 has dup fanin 277.
ABC: Node 279 has dup fanin 278.
ABC: Node 281 has dup fanin 279.
ABC: Node 281 has dup fanin 280.
ABC: Node 281 has dup fanin 279.
ABC: Node 281 has dup fanin 280.
ABC: + upsize -D 0 
ABC: + dnsize -D 0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    284 ( 23.6 %)   Cap =  9.1 ff ( 11.6 %)   Area =     2687.58 ( 62.7 %)   Delay =  4139.03 ps  ( 35.9 %)               
ABC: Path  0 --       4 : 0    4 pi                        A =   0.00  Df =  17.7  -11.5 ps  S =  32.4 ps  Cin =  0.0 ff  Cout =  14.8 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      41 : 1    5 sky130_fd_sc_hd__inv_4    A =   6.26  Df =  52.8   -4.6 ps  S =  46.2 ps  Cin =  9.0 ff  Cout =  13.8 ff  Cmax = 563.1 ff  G =  145  
ABC: Path  2 --      92 : 4    4 sky130_fd_sc_hd__or4_4    A =  11.26  Df = 599.4 -403.9 ps  S = 105.2 ps  Cin =  2.4 ff  Cout =  15.3 ff  Cmax = 534.7 ff  G =  610  
ABC: Path  3 --      93 : 2    3 sky130_fd_sc_hd__nand2b_4 A =  13.76  Df = 702.3 -295.8 ps  S =  67.1 ps  Cin =  5.6 ff  Cout =  12.6 ff  Cmax = 521.9 ff  G =  213  
ABC: Path  4 --      95 : 4    3 sky130_fd_sc_hd__a2bb2o_4 A =  20.02  Df = 927.5  -89.3 ps  S =  53.1 ps  Cin =  4.6 ff  Cout =  11.7 ff  Cmax = 502.6 ff  G =  241  
ABC: Path  5 --      96 : 4    3 sky130_fd_sc_hd__a2bb2o_4 A =  20.02  Df =1136.1   -4.0 ps  S =  53.3 ps  Cin =  4.6 ff  Cout =  11.8 ff  Cmax = 502.6 ff  G =  241  
ABC: Path  6 --      97 : 4    3 sky130_fd_sc_hd__a2bb2o_4 A =  20.02  Df =1354.0  -13.3 ps  S =  53.0 ps  Cin =  4.6 ff  Cout =  11.7 ff  Cmax = 502.6 ff  G =  241  
ABC: Path  7 --      98 : 4    3 sky130_fd_sc_hd__a2bb2o_4 A =  20.02  Df =1566.4   -2.8 ps  S =  59.1 ps  Cin =  4.6 ff  Cout =  13.9 ff  Cmax = 502.6 ff  G =  284  
ABC: Path  8 --     101 : 4    3 sky130_fd_sc_hd__o22a_4   A =  17.52  Df =1989.6  -66.4 ps  S =  61.2 ps  Cin =  4.6 ff  Cout =  14.9 ff  Cmax = 530.1 ff  G =  310  
ABC: Path  9 --     121 : 4    3 sky130_fd_sc_hd__o22a_4   A =  17.52  Df =2213.5 -107.8 ps  S =  61.2 ps  Cin =  4.6 ff  Cout =  14.9 ff  Cmax = 530.1 ff  G =  310  
ABC: Path 10 --     146 : 4    3 sky130_fd_sc_hd__o22a_4   A =  17.52  Df =2437.4 -107.8 ps  S =  61.2 ps  Cin =  4.6 ff  Cout =  14.9 ff  Cmax = 530.1 ff  G =  310  
ABC: Path 11 --     177 : 4    3 sky130_fd_sc_hd__o22a_4   A =  17.52  Df =2661.2 -109.8 ps  S =  61.2 ps  Cin =  4.6 ff  Cout =  14.9 ff  Cmax = 530.1 ff  G =  310  
ABC: Path 12 --     234 : 4    3 sky130_fd_sc_hd__o22a_4   A =  17.52  Df =2882.5 -182.0 ps  S =  58.3 ps  Cin =  4.6 ff  Cout =  13.8 ff  Cmax = 530.1 ff  G =  286  
ABC: Path 13 --     257 : 4    3 sky130_fd_sc_hd__o22a_4   A =  17.52  Df =3080.9 -158.2 ps  S =  58.8 ps  Cin =  4.6 ff  Cout =  13.8 ff  Cmax = 530.1 ff  G =  286  
ABC: Path 14 --     275 : 4    3 sky130_fd_sc_hd__o22a_4   A =  17.52  Df =3279.3 -212.9 ps  S =  58.8 ps  Cin =  4.6 ff  Cout =  13.8 ff  Cmax = 530.1 ff  G =  286  
ABC: Path 15 --     293 : 4    3 sky130_fd_sc_hd__o22a_4   A =  17.52  Df =3477.7 -267.5 ps  S =  58.3 ps  Cin =  4.6 ff  Cout =  13.8 ff  Cmax = 530.1 ff  G =  286  
ABC: Path 16 --     306 : 4    3 sky130_fd_sc_hd__o22a_4   A =  17.52  Df =3676.0 -322.4 ps  S =  58.3 ps  Cin =  4.6 ff  Cout =  13.8 ff  Cmax = 530.1 ff  G =  286  
ABC: Path 17 --     312 : 4    3 sky130_fd_sc_hd__o22a_4   A =  17.52  Df =3870.1 -378.1 ps  S =  53.2 ps  Cin =  4.6 ff  Cout =  11.7 ff  Cmax = 530.1 ff  G =  242  
ABC: Path 18 --     314 : 5    1 sky130_fd_sc_hd__o32a_2   A =  11.26  Df =4045.3 -426.1 ps  S =  59.3 ps  Cin =  2.3 ff  Cout =   4.6 ff  Cmax = 300.3 ff  G =  193  
ABC: Path 19 --     315 : 1    1 sky130_fd_sc_hd__inv_2    A =   3.75  Df =4139.0 -466.8 ps  S =  87.2 ps  Cin =  4.5 ff  Cout =  17.6 ff  Cmax = 331.4 ff  G =  395  
ABC: Start-point = pi3 (\b [1]).  End-point = po14 (\CMP48.cout).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   16/   16  lat =    0  nd =   284  edge =    841  area =2687.50  delay =23.00  lev = 23
ABC: + write_blif /tmp/yosys-abc-7cYMxV/output.blif 

22.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:       33
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_4 cells:       20
ABC RESULTS:   sky130_fd_sc_hd__a2bb2oi_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       30
ABC RESULTS:   sky130_fd_sc_hd__buf_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_6 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       34
ABC RESULTS:   sky130_fd_sc_hd__inv_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand2b_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ai_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       37
ABC RESULTS:   sky130_fd_sc_hd__o22a_4 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o2bb2ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__or2_4 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__or4_4 cells:        3
ABC RESULTS:        internal signals:      308
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       16
Removing temp directory.

23. Executing SETUNDEF pass (replace undef values with defined constants).

24. Executing HILOMAP pass (mapping to constant drivers).

25. Executing SPLITNETS pass (splitting up multi-bit signals).

26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m3..
Removed 0 unused cells and 356 unused wires.
<suppressed ~17 debug messages>

27. Executing INSBUF pass (insert buffer cells for connected wires).

28. Executing CHECK pass (checking for obvious problems).
Checking module dvsd_8216m3...
Warning: Wire dvsd_8216m3.\m [15] is used but has no driver.
Warning: Wire dvsd_8216m3.\m [14] is used but has no driver.
Warning: Wire dvsd_8216m3.\m [13] is used but has no driver.
Warning: Wire dvsd_8216m3.\m [12] is used but has no driver.
Warning: Wire dvsd_8216m3.\m [11] is used but has no driver.
Warning: Wire dvsd_8216m3.\m [10] is used but has no driver.
Warning: Wire dvsd_8216m3.\m [9] is used but has no driver.
Warning: Wire dvsd_8216m3.\m [8] is used but has no driver.
Warning: Wire dvsd_8216m3.\m [7] is used but has no driver.
Warning: Wire dvsd_8216m3.\m [6] is used but has no driver.
Warning: Wire dvsd_8216m3.\m [5] is used but has no driver.
Warning: Wire dvsd_8216m3.\m [4] is used but has no driver.
Warning: Wire dvsd_8216m3.\m [3] is used but has no driver.
Warning: Wire dvsd_8216m3.\m [2] is used but has no driver.
Warning: Wire dvsd_8216m3.\m [1] is used but has no driver.
Warning: Wire dvsd_8216m3.\m [0] is used but has no driver.
Found and reported 16 problems.

29. Printing statistics.

=== dvsd_8216m3 ===

   Number of wires:                271
   Number of wire bits:            300
   Number of public wires:           3
   Number of public wire bits:      32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                284
     sky130_fd_sc_hd__a21oi_2        5
     sky130_fd_sc_hd__a22o_2         4
     sky130_fd_sc_hd__a2bb2o_2      33
     sky130_fd_sc_hd__a2bb2o_4      20
     sky130_fd_sc_hd__a2bb2oi_2     13
     sky130_fd_sc_hd__a31o_2         5
     sky130_fd_sc_hd__a32o_2         5
     sky130_fd_sc_hd__and4_2         6
     sky130_fd_sc_hd__buf_1         30
     sky130_fd_sc_hd__buf_2          1
     sky130_fd_sc_hd__buf_6          1
     sky130_fd_sc_hd__inv_2         34
     sky130_fd_sc_hd__inv_4          1
     sky130_fd_sc_hd__nand2_2        4
     sky130_fd_sc_hd__nand2b_2       2
     sky130_fd_sc_hd__nand2b_4       1
     sky130_fd_sc_hd__nor2_2        16
     sky130_fd_sc_hd__nor2b_2        1
     sky130_fd_sc_hd__o21a_2         2
     sky130_fd_sc_hd__o21ai_2        1
     sky130_fd_sc_hd__o21ai_4        1
     sky130_fd_sc_hd__o21ba_2        2
     sky130_fd_sc_hd__o22a_2        37
     sky130_fd_sc_hd__o22a_4        10
     sky130_fd_sc_hd__o2bb2a_2       3
     sky130_fd_sc_hd__o2bb2ai_2      3
     sky130_fd_sc_hd__o32a_2        10
     sky130_fd_sc_hd__or2_2         19
     sky130_fd_sc_hd__or2_4          2
     sky130_fd_sc_hd__or2b_2         4
     sky130_fd_sc_hd__or4_2          5
     sky130_fd_sc_hd__or4_4          3

   Chip area for module '\dvsd_8216m3': 2687.577600

30. Executing Verilog backend.
Dumping module `\dvsd_8216m3'.

Warnings: 16 unique messages, 16 total
End of script. Logfile hash: 6576d14837, CPU: user 2.16s system 0.06s, MEM: 45.32 MB peak
Yosys 0.9+4052 (git sha1 d061b0e, gcc 8.3.1 -fPIC -Os)
Time spent: 47% 2x abc (1 sec), 13% 4x stat (0 sec), ...
