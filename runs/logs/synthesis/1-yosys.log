
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4052 (git sha1 d061b0e, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openLANE_flow/designs/dvsd_8216m9/src/dvsd_8216m9.v
Parsing SystemVerilog input from `/openLANE_flow/designs/dvsd_8216m9/src/dvsd_8216m9.v' to AST representation.
Generating RTLIL representation for module `\dvsd_8216m9'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/dvsd_8216m9/runs/20-08_18-30/tmp/synthesis/hierarchy.dot'.
Dumping module dvsd_8216m9 to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \dvsd_8216m9

3.2. Analyzing design hierarchy..
Top module:  \dvsd_8216m9
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \dvsd_8216m9

5.1.2. Analyzing design hierarchy..
Top module:  \dvsd_8216m9
Removed 0 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

5.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

5.2.4. Executing PROC_INIT pass (extract init attributes).

5.2.5. Executing PROC_ARST pass (detect async resets in processes).

5.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

5.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

5.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

5.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.3. Executing FLATTEN pass (flatten design).

5.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m9.

5.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m9..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

5.6. Executing CHECK pass (checking for obvious problems).
Checking module dvsd_8216m9...
Found and reported 0 problems.

5.7. Executing OPT pass (performing simple optimizations).

5.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m9.

5.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m9'.
Removed a total of 0 cells.

5.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_8216m9..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_8216m9.
Performed a total of 0 changes.

5.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m9'.
Removed a total of 0 cells.

5.7.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m9..

5.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m9.

5.7.9. Finished OPT passes. (There is nothing left to do.)

5.8. Executing FSM pass (extract and optimize FSM).

5.8.1. Executing FSM_DETECT pass (finding FSMs in design).

5.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m9..

5.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.9. Executing OPT pass (performing simple optimizations).

5.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m9.

5.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m9'.
Removed a total of 0 cells.

5.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_8216m9..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_8216m9.
Performed a total of 0 changes.

5.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m9'.
Removed a total of 0 cells.

5.9.6. Executing OPT_DFF pass (perform DFF optimizations).

5.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m9..

5.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m9.

5.9.9. Finished OPT passes. (There is nothing left to do.)

5.10. Executing WREDUCE pass (reducing word size of cells).

5.11. Executing PEEPOPT pass (run peephole optimizers).

5.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m9..

5.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module dvsd_8216m9:
  creating $macc model for $mul$/openLANE_flow/designs/dvsd_8216m9/src/dvsd_8216m9.v:24$1 ($mul).
  creating $macc cell for $mul$/openLANE_flow/designs/dvsd_8216m9/src/dvsd_8216m9.v:24$1: $auto$alumacc.cc:365:replace_macc$2
  created 0 $alu and 1 $macc cells.

5.14. Executing SHARE pass (SAT-based resource sharing).

5.15. Executing OPT pass (performing simple optimizations).

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m9.

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m9'.
Removed a total of 0 cells.

5.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_8216m9..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_8216m9.
Performed a total of 0 changes.

5.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m9'.
Removed a total of 0 cells.

5.15.6. Executing OPT_DFF pass (perform DFF optimizations).

5.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m9..

5.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m9.

5.15.9. Finished OPT passes. (There is nothing left to do.)

5.16. Executing MEMORY pass.

5.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.16.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.16.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m9..

5.16.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m9..

5.16.6. Executing MEMORY_COLLECT pass (generating $mem cells).

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m9..

5.18. Executing OPT pass (performing simple optimizations).

5.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m9.

5.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m9'.
Removed a total of 0 cells.

5.18.3. Executing OPT_DFF pass (perform DFF optimizations).

5.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m9..

5.18.5. Finished fast OPT passes.

5.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

5.20. Executing OPT pass (performing simple optimizations).

5.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m9.

5.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m9'.
Removed a total of 0 cells.

5.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_8216m9..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_8216m9.
Performed a total of 0 changes.

5.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m9'.
Removed a total of 0 cells.

5.20.6. Executing OPT_SHARE pass.

5.20.7. Executing OPT_DFF pass (perform DFF optimizations).

5.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m9..

5.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m9.

5.20.10. Finished OPT passes. (There is nothing left to do.)

5.21. Executing TECHMAP pass (map to technology primitives).

5.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.21.2. Continuing TECHMAP pass.
Using extmapper maccmap for cells of type $macc.
  add \A * \B (8x8 bits, unsigned)
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~327 debug messages>

5.22. Executing OPT pass (performing simple optimizations).

5.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m9.
<suppressed ~383 debug messages>

5.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m9'.
Removed a total of 0 cells.

5.22.3. Executing OPT_DFF pass (perform DFF optimizations).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m9..
Removed 24 unused cells and 110 unused wires.
<suppressed ~25 debug messages>

5.22.5. Finished fast OPT passes.

5.23. Executing ABC pass (technology mapping using ABC).

5.23.1. Extracting gate netlist of module `\dvsd_8216m9' to `<abc-temp-dir>/input.blif'..
Extracted 347 gates and 363 wires to a netlist network with 16 inputs and 16 outputs.

5.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       55
ABC RESULTS:            ANDNOT cells:       97
ABC RESULTS:              NAND cells:       25
ABC RESULTS:               NOR cells:       12
ABC RESULTS:               NOT cells:        7
ABC RESULTS:                OR cells:       37
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:              XNOR cells:       25
ABC RESULTS:               XOR cells:       86
ABC RESULTS:        internal signals:      331
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       16
Removing temp directory.

5.24. Executing OPT pass (performing simple optimizations).

5.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m9.

5.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m9'.
Removed a total of 0 cells.

5.24.3. Executing OPT_DFF pass (perform DFF optimizations).

5.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m9..
Removed 0 unused cells and 97 unused wires.
<suppressed ~1 debug messages>

5.24.5. Finished fast OPT passes.

5.25. Executing HIERARCHY pass (managing design hierarchy).

5.25.1. Analyzing design hierarchy..
Top module:  \dvsd_8216m9

5.25.2. Analyzing design hierarchy..
Top module:  \dvsd_8216m9
Removed 0 unused modules.

5.26. Printing statistics.

=== dvsd_8216m9 ===

   Number of wires:                341
   Number of wire bits:            370
   Number of public wires:           3
   Number of public wire bits:      32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                354
     $_ANDNOT_                      97
     $_AND_                         55
     $_NAND_                        25
     $_NOR_                         12
     $_NOT_                          7
     $_ORNOT_                       10
     $_OR_                          37
     $_XNOR_                        25
     $_XOR_                         86

5.27. Executing CHECK pass (checking for obvious problems).
Checking module dvsd_8216m9...
Found and reported 0 problems.

6. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/dvsd_8216m9/runs/20-08_18-30/tmp/synthesis/post_techmap.dot'.
Dumping module dvsd_8216m9 to page 1.

7. Executing SHARE pass (SAT-based resource sharing).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m9.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m9'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_8216m9..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_8216m9.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_8216m9'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m9..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_8216m9.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m9..

10. Printing statistics.

=== dvsd_8216m9 ===

   Number of wires:                341
   Number of wire bits:            370
   Number of public wires:           3
   Number of public wire bits:      32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                354
     $_ANDNOT_                      97
     $_AND_                         55
     $_NAND_                        25
     $_NOR_                         12
     $_NOT_                          7
     $_ORNOT_                       10
     $_OR_                          37
     $_XNOR_                        25
     $_XOR_                         86

mapping tbuf

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: /home/drako/applications/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/drako/applications/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

12. Executing SIMPLEMAP pass (map simple cells to gate primitives).

13. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module dvsd_8216m9..
  Treeifying 0 MUXes:
    Finished treeification: Found 0 trees.
  Covering trees:
  Added a total of 0 decoder MUXes.
<suppressed ~1 debug messages>

14. Executing TECHMAP pass (map to technology primitives).

14.1. Executing Verilog-2005 frontend: /home/drako/applications/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v
Parsing Verilog input from `/home/drako/applications/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX4_'.
Successfully finished Verilog frontend.

14.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

15. Executing SIMPLEMAP pass (map simple cells to gate primitives).

16. Executing TECHMAP pass (map to technology primitives).

16.1. Executing Verilog-2005 frontend: /home/drako/applications/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v
Parsing Verilog input from `/home/drako/applications/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX_'.
Successfully finished Verilog frontend.

16.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

17. Executing SIMPLEMAP pass (map simple cells to gate primitives).

18. Executing TECHMAP pass (map to technology primitives).

18.1. Executing Verilog-2005 frontend: /home/drako/applications/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/drako/applications/vsdflow/work/tools/openlane_working_dir/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

19. Executing SIMPLEMAP pass (map simple cells to gate primitives).

20. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

20.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\dvsd_8216m9':

21. Printing statistics.

=== dvsd_8216m9 ===

   Number of wires:                341
   Number of wire bits:            370
   Number of public wires:           3
   Number of public wire bits:      32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                354
     $_ANDNOT_                      97
     $_AND_                         55
     $_NAND_                        25
     $_NOR_                         12
     $_NOT_                          7
     $_ORNOT_                       10
     $_OR_                          37
     $_XNOR_                        25
     $_XOR_                         86

[INFO]: ABC: WireLoad : S_4

22. Executing ABC pass (technology mapping using ABC).

22.1. Extracting gate netlist of module `\dvsd_8216m9' to `/tmp/yosys-abc-9DHjC1/input.blif'..
Extracted 354 gates and 370 wires to a netlist network with 16 inputs and 16 outputs.

22.1.1. Executing ABC.
Running ABC command: /build/bin/yosys-abc -s -f /tmp/yosys-abc-9DHjC1/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-9DHjC1/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-9DHjC1/input.blif 
ABC: + read_lib -w /openLANE_flow/designs/dvsd_8216m9/runs/20-08_18-30/tmp/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.14 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/openLANE_flow/designs/dvsd_8216m9/runs/20-08_18-30/tmp/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.19 sec
ABC: Memory =    7.77 MB. Time =     0.19 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openLANE_flow/designs/dvsd_8216m9/runs/20-08_18-30/tmp/synthesis/yosys.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_8".
ABC: Setting output load to be 17.650000.
ABC: + read_constr /openLANE_flow/designs/dvsd_8216m9/runs/20-08_18-30/tmp/synthesis/yosys.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 0 
ABC: + buffer -N 5 -S 0.0 
ABC: Node 53 has dup fanin 49.
ABC: Node 53 has dup fanin 52.
ABC: Node 53 has dup fanin 49.
ABC: Node 53 has dup fanin 52.
ABC: Node 60 has dup fanin 53.
ABC: Node 60 has dup fanin 58.
ABC: Node 60 has dup fanin 53.
ABC: Node 60 has dup fanin 58.
ABC: Node 70 has dup fanin 66.
ABC: Node 70 has dup fanin 69.
ABC: Node 70 has dup fanin 66.
ABC: Node 70 has dup fanin 69.
ABC: Node 71 has dup fanin 65.
ABC: Node 71 has dup fanin 70.
ABC: Node 71 has dup fanin 65.
ABC: Node 71 has dup fanin 70.
ABC: Node 72 has dup fanin 64.
ABC: Node 72 has dup fanin 71.
ABC: Node 72 has dup fanin 64.
ABC: Node 72 has dup fanin 71.
ABC: Node 76 has dup fanin 55.
ABC: Node 76 has dup fanin 57.
ABC: Node 76 has dup fanin 55.
ABC: Node 76 has dup fanin 57.
ABC: Node 79 has dup fanin 59.
ABC: Node 79 has dup fanin 60.
ABC: Node 79 has dup fanin 59.
ABC: Node 79 has dup fanin 60.
ABC: Node 90 has dup fanin 86.
ABC: Node 90 has dup fanin 89.
ABC: Node 90 has dup fanin 86.
ABC: Node 90 has dup fanin 89.
ABC: Node 91 has dup fanin 85.
ABC: Node 91 has dup fanin 90.
ABC: Node 91 has dup fanin 85.
ABC: Node 91 has dup fanin 90.
ABC: Node 98 has dup fanin 91.
ABC: Node 98 has dup fanin 97.
ABC: Node 98 has dup fanin 91.
ABC: Node 98 has dup fanin 97.
ABC: Node 99 has dup fanin 84.
ABC: Node 99 has dup fanin 98.
ABC: Node 99 has dup fanin 84.
ABC: Node 99 has dup fanin 98.
ABC: Node 109 has dup fanin 105.
ABC: Node 109 has dup fanin 108.
ABC: Node 109 has dup fanin 105.
ABC: Node 109 has dup fanin 108.
ABC: Node 114 has dup fanin 110.
ABC: Node 114 has dup fanin 113.
ABC: Node 114 has dup fanin 110.
ABC: Node 114 has dup fanin 113.
ABC: Node 116 has dup fanin 114.
ABC: Node 116 has dup fanin 115.
ABC: Node 116 has dup fanin 114.
ABC: Node 116 has dup fanin 115.
ABC: Node 117 has dup fanin 109.
ABC: Node 117 has dup fanin 116.
ABC: Node 117 has dup fanin 109.
ABC: Node 117 has dup fanin 116.
ABC: Node 119 has dup fanin 117.
ABC: Node 119 has dup fanin 118.
ABC: Node 119 has dup fanin 117.
ABC: Node 119 has dup fanin 118.
ABC: Node 120 has dup fanin 104.
ABC: Node 120 has dup fanin 119.
ABC: Node 120 has dup fanin 104.
ABC: Node 120 has dup fanin 119.
ABC: Node 124 has dup fanin 63.
ABC: Node 124 has dup fanin 99.
ABC: Node 124 has dup fanin 63.
ABC: Node 124 has dup fanin 99.
ABC: Node 126 has dup fanin 123.
ABC: Node 126 has dup fanin 125.
ABC: Node 126 has dup fanin 123.
ABC: Node 126 has dup fanin 125.
ABC: Node 128 has dup fanin 126.
ABC: Node 128 has dup fanin 127.
ABC: Node 128 has dup fanin 126.
ABC: Node 128 has dup fanin 127.
ABC: Node 132 has dup fanin 130.
ABC: Node 132 has dup fanin 131.
ABC: Node 132 has dup fanin 130.
ABC: Node 132 has dup fanin 131.
ABC: Node 133 has dup fanin 129.
ABC: Node 133 has dup fanin 132.
ABC: Node 133 has dup fanin 129.
ABC: Node 133 has dup fanin 132.
ABC: Node 145 has dup fanin 140.
ABC: Node 145 has dup fanin 144.
ABC: Node 145 has dup fanin 140.
ABC: Node 145 has dup fanin 144.
ABC: Node 147 has dup fanin 145.
ABC: Node 147 has dup fanin 146.
ABC: Node 147 has dup fanin 145.
ABC: Node 147 has dup fanin 146.
ABC: Node 148 has dup fanin 139.
ABC: Node 148 has dup fanin 147.
ABC: Node 148 has dup fanin 139.
ABC: Node 148 has dup fanin 147.
ABC: Node 150 has dup fanin 148.
ABC: Node 150 has dup fanin 149.
ABC: Node 150 has dup fanin 148.
ABC: Node 150 has dup fanin 149.
ABC: Node 151 has dup fanin 133.
ABC: Node 151 has dup fanin 150.
ABC: Node 151 has dup fanin 133.
ABC: Node 151 has dup fanin 150.
ABC: Node 153 has dup fanin 151.
ABC: Node 153 has dup fanin 152.
ABC: Node 153 has dup fanin 151.
ABC: Node 153 has dup fanin 152.
ABC: Node 154 has dup fanin 103.
ABC: Node 154 has dup fanin 153.
ABC: Node 154 has dup fanin 103.
ABC: Node 154 has dup fanin 153.
ABC: Node 158 has dup fanin 156.
ABC: Node 158 has dup fanin 157.
ABC: Node 158 has dup fanin 156.
ABC: Node 158 has dup fanin 157.
ABC: Node 177 has dup fanin 175.
ABC: Node 177 has dup fanin 176.
ABC: Node 177 has dup fanin 175.
ABC: Node 177 has dup fanin 176.
ABC: Node 178 has dup fanin 172.
ABC: Node 178 has dup fanin 177.
ABC: Node 178 has dup fanin 172.
ABC: Node 178 has dup fanin 177.
ABC: Node 180 has dup fanin 178.
ABC: Node 180 has dup fanin 179.
ABC: Node 180 has dup fanin 178.
ABC: Node 180 has dup fanin 179.
ABC: Node 181 has dup fanin 166.
ABC: Node 181 has dup fanin 180.
ABC: Node 181 has dup fanin 166.
ABC: Node 181 has dup fanin 180.
ABC: Node 183 has dup fanin 181.
ABC: Node 183 has dup fanin 182.
ABC: Node 183 has dup fanin 181.
ABC: Node 183 has dup fanin 182.
ABC: Node 184 has dup fanin 159.
ABC: Node 184 has dup fanin 183.
ABC: Node 184 has dup fanin 159.
ABC: Node 184 has dup fanin 183.
ABC: Node 190 has dup fanin 188.
ABC: Node 190 has dup fanin 189.
ABC: Node 190 has dup fanin 188.
ABC: Node 190 has dup fanin 189.
ABC: Node 207 has dup fanin 205.
ABC: Node 207 has dup fanin 206.
ABC: Node 207 has dup fanin 205.
ABC: Node 207 has dup fanin 206.
ABC: Node 209 has dup fanin 207.
ABC: Node 209 has dup fanin 208.
ABC: Node 209 has dup fanin 207.
ABC: Node 209 has dup fanin 208.
ABC: Node 210 has dup fanin 199.
ABC: Node 210 has dup fanin 209.
ABC: Node 210 has dup fanin 199.
ABC: Node 210 has dup fanin 209.
ABC: Node 212 has dup fanin 210.
ABC: Node 212 has dup fanin 211.
ABC: Node 212 has dup fanin 210.
ABC: Node 212 has dup fanin 211.
ABC: Node 213 has dup fanin 192.
ABC: Node 213 has dup fanin 212.
ABC: Node 213 has dup fanin 192.
ABC: Node 213 has dup fanin 212.
ABC: Node 217 has dup fanin 215.
ABC: Node 217 has dup fanin 216.
ABC: Node 217 has dup fanin 215.
ABC: Node 217 has dup fanin 216.
ABC: Node 230 has dup fanin 228.
ABC: Node 230 has dup fanin 229.
ABC: Node 230 has dup fanin 228.
ABC: Node 230 has dup fanin 229.
ABC: Node 232 has dup fanin 230.
ABC: Node 232 has dup fanin 231.
ABC: Node 232 has dup fanin 230.
ABC: Node 232 has dup fanin 231.
ABC: Node 233 has dup fanin 225.
ABC: Node 233 has dup fanin 232.
ABC: Node 233 has dup fanin 225.
ABC: Node 233 has dup fanin 232.
ABC: Node 235 has dup fanin 233.
ABC: Node 235 has dup fanin 234.
ABC: Node 235 has dup fanin 233.
ABC: Node 235 has dup fanin 234.
ABC: Node 236 has dup fanin 218.
ABC: Node 236 has dup fanin 235.
ABC: Node 236 has dup fanin 218.
ABC: Node 236 has dup fanin 235.
ABC: Node 260 has dup fanin 258.
ABC: Node 260 has dup fanin 259.
ABC: Node 260 has dup fanin 258.
ABC: Node 260 has dup fanin 259.
ABC: Node 261 has dup fanin 245.
ABC: Node 261 has dup fanin 260.
ABC: Node 261 has dup fanin 245.
ABC: Node 261 has dup fanin 260.
ABC: Node 268 has dup fanin 265.
ABC: Node 268 has dup fanin 267.
ABC: Node 268 has dup fanin 265.
ABC: Node 268 has dup fanin 267.
ABC: Node 274 has dup fanin 271.
ABC: Node 274 has dup fanin 273.
ABC: Node 274 has dup fanin 271.
ABC: Node 274 has dup fanin 273.
ABC: Node 281 has dup fanin 279.
ABC: Node 281 has dup fanin 280.
ABC: Node 281 has dup fanin 279.
ABC: Node 281 has dup fanin 280.
ABC: Node 298 has dup fanin 296.
ABC: Node 298 has dup fanin 297.
ABC: Node 298 has dup fanin 296.
ABC: Node 298 has dup fanin 297.
ABC: Node 304 has dup fanin 302.
ABC: Node 304 has dup fanin 303.
ABC: Node 304 has dup fanin 302.
ABC: Node 304 has dup fanin 303.
ABC: Node 307 has dup fanin 305.
ABC: Node 307 has dup fanin 306.
ABC: Node 307 has dup fanin 305.
ABC: Node 307 has dup fanin 306.
ABC: Node 310 has dup fanin 307.
ABC: Node 310 has dup fanin 309.
ABC: Node 310 has dup fanin 307.
ABC: Node 310 has dup fanin 309.
ABC: Node 313 has dup fanin 124.
ABC: Node 313 has dup fanin 312.
ABC: Node 313 has dup fanin 124.
ABC: Node 313 has dup fanin 312.
ABC: + upsize -D 0 
ABC: + dnsize -D 0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    326 ( 26.1 %)   Cap =  8.3 ff ( 13.2 %)   Area =     2955.33 ( 58.6 %)   Delay =  3566.55 ps  ( 25.5 %)               
ABC: Path  0 --       7 : 0    4 pi                        A =   0.00  Df =  12.2   -8.1 ps  S =  25.4 ps  Cin =  0.0 ff  Cout =   9.9 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      44 : 1    2 sky130_fd_sc_hd__inv_2    A =   3.75  Df =  36.9   -0.3 ps  S =  30.2 ps  Cin =  4.5 ff  Cout =   5.0 ff  Cmax = 331.4 ff  G =  106  
ABC: Path  2 --      45 : 1    5 sky130_fd_sc_hd__buf_4    A =   7.51  Df = 161.5  -19.4 ps  S =  45.3 ps  Cin =  2.4 ff  Cout =  11.2 ff  Cmax = 561.2 ff  G =  442  
ABC: Path  3 --      79 : 4    1 sky130_fd_sc_hd__o22a_2   A =  10.01  Df = 366.7 -103.1 ps  S =  34.5 ps  Cin =  2.4 ff  Cout =   2.5 ff  Cmax = 304.9 ff  G =  102  
ABC: Path  4 --      82 : 2    3 sky130_fd_sc_hd__or2_4    A =   8.76  Df = 607.8 -163.6 ps  S =  48.8 ps  Cin =  2.4 ff  Cout =   6.2 ff  Cmax = 514.5 ff  G =  246  
ABC: Path  5 --      83 : 4    3 sky130_fd_sc_hd__a2bb2o_2 A =  11.26  Df = 866.9   -7.3 ps  S =  78.6 ps  Cin =  1.7 ff  Cout =  11.8 ff  Cmax = 300.3 ff  G =  647  
ABC: Path  6 --      97 : 4    3 sky130_fd_sc_hd__o22a_2   A =  10.01  Df =1281.6  -65.2 ps  S =  78.0 ps  Cin =  2.4 ff  Cout =  12.6 ff  Cmax = 304.9 ff  G =  509  
ABC: Path  7 --     122 : 4    2 sky130_fd_sc_hd__o22a_2   A =  10.01  Df =1688.4  -59.6 ps  S =  52.9 ps  Cin =  2.4 ff  Cout =   7.1 ff  Cmax = 304.9 ff  G =  288  
ABC: Path  8 --     149 : 2    3 sky130_fd_sc_hd__or2_4    A =   8.76  Df =1948.7 -137.5 ps  S =  57.3 ps  Cin =  2.4 ff  Cout =  12.1 ff  Cmax = 514.5 ff  G =  485  
ABC: Path  9 --     223 : 4    4 sky130_fd_sc_hd__o22a_4   A =  17.52  Df =2768.3 -147.0 ps  S =  82.9 ps  Cin =  4.6 ff  Cout =  23.0 ff  Cmax = 530.1 ff  G =  472  
ABC: Path 10 --     254 : 3    3 sky130_fd_sc_hd__nor3_4   A =  16.27  Df =2933.0 -181.2 ps  S = 194.7 ps  Cin =  8.7 ff  Cout =  12.2 ff  Cmax = 153.8 ff  G =  134  
ABC: Path 11 --     328 : 4    3 sky130_fd_sc_hd__a31o_4   A =  17.52  Df =3138.7  -64.8 ps  S =  71.3 ps  Cin =  4.6 ff  Cout =  16.2 ff  Cmax = 499.0 ff  G =  335  
ABC: Path 12 --     329 : 1    2 sky130_fd_sc_hd__inv_2    A =   3.75  Df =3186.7  -41.8 ps  S =  59.9 ps  Cin =  4.5 ff  Cout =  11.6 ff  Cmax = 331.4 ff  G =  242  
ABC: Path 13 --     342 : 3    2 sky130_fd_sc_hd__o21ai_4  A =  16.27  Df =3315.9 -116.5 ps  S = 127.2 ps  Cin =  8.8 ff  Cout =   9.2 ff  Cmax = 224.3 ff  G =  100  
ABC: Path 14 --     343 : 4    1 sky130_fd_sc_hd__a2bb2o_4 A =  20.02  Df =3566.6  -85.4 ps  S =  70.0 ps  Cin =  4.6 ff  Cout =  17.6 ff  Cmax = 502.6 ff  G =  382  
ABC: Start-point = pi6 (\A [3]).  End-point = po8 (\M [13]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   16/   16  lat =    0  nd =   326  edge =    911  area =2955.31  delay =22.00  lev = 22
ABC: + write_blif /tmp/yosys-abc-9DHjC1/output.blif 

22.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21o_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_4 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__a2bb2oi_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__a31o_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31oi_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       32
ABC RESULTS:   sky130_fd_sc_hd__buf_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_4 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__buf_6 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       45
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21ai_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o221ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       38
ABC RESULTS:   sky130_fd_sc_hd__o22a_4 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       32
ABC RESULTS:   sky130_fd_sc_hd__or2_4 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or4_4 cells:        1
ABC RESULTS:        internal signals:      338
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       16
Removing temp directory.

23. Executing SETUNDEF pass (replace undef values with defined constants).

24. Executing HILOMAP pass (mapping to constant drivers).

25. Executing SPLITNETS pass (splitting up multi-bit signals).

26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_8216m9..
Removed 0 unused cells and 370 unused wires.
<suppressed ~1 debug messages>

27. Executing INSBUF pass (insert buffer cells for connected wires).

28. Executing CHECK pass (checking for obvious problems).
Checking module dvsd_8216m9...
Warning: Wire dvsd_8216m9.\M [15] is used but has no driver.
Warning: Wire dvsd_8216m9.\M [14] is used but has no driver.
Warning: Wire dvsd_8216m9.\M [13] is used but has no driver.
Warning: Wire dvsd_8216m9.\M [12] is used but has no driver.
Warning: Wire dvsd_8216m9.\M [11] is used but has no driver.
Warning: Wire dvsd_8216m9.\M [10] is used but has no driver.
Warning: Wire dvsd_8216m9.\M [9] is used but has no driver.
Warning: Wire dvsd_8216m9.\M [8] is used but has no driver.
Warning: Wire dvsd_8216m9.\M [7] is used but has no driver.
Warning: Wire dvsd_8216m9.\M [6] is used but has no driver.
Warning: Wire dvsd_8216m9.\M [5] is used but has no driver.
Warning: Wire dvsd_8216m9.\M [4] is used but has no driver.
Warning: Wire dvsd_8216m9.\M [3] is used but has no driver.
Warning: Wire dvsd_8216m9.\M [2] is used but has no driver.
Warning: Wire dvsd_8216m9.\M [1] is used but has no driver.
Warning: Wire dvsd_8216m9.\M [0] is used but has no driver.
Found and reported 16 problems.

29. Printing statistics.

=== dvsd_8216m9 ===

   Number of wires:                313
   Number of wire bits:            342
   Number of public wires:           3
   Number of public wire bits:      32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                326
     sky130_fd_sc_hd__a21bo_2        1
     sky130_fd_sc_hd__a21boi_2       2
     sky130_fd_sc_hd__a21o_2         4
     sky130_fd_sc_hd__a21o_4         1
     sky130_fd_sc_hd__a21oi_2        4
     sky130_fd_sc_hd__a22o_2         3
     sky130_fd_sc_hd__a2bb2o_2      27
     sky130_fd_sc_hd__a2bb2o_4      27
     sky130_fd_sc_hd__a2bb2oi_2      4
     sky130_fd_sc_hd__a31o_2         7
     sky130_fd_sc_hd__a31o_4         1
     sky130_fd_sc_hd__a31oi_4        1
     sky130_fd_sc_hd__a32o_2         9
     sky130_fd_sc_hd__and2_2         1
     sky130_fd_sc_hd__and4_2        12
     sky130_fd_sc_hd__buf_1         32
     sky130_fd_sc_hd__buf_2          1
     sky130_fd_sc_hd__buf_4          3
     sky130_fd_sc_hd__buf_6          4
     sky130_fd_sc_hd__inv_2         45
     sky130_fd_sc_hd__mux2_2         1
     sky130_fd_sc_hd__nand2_2        1
     sky130_fd_sc_hd__nand2b_2       1
     sky130_fd_sc_hd__nor2_2        13
     sky130_fd_sc_hd__nor2b_2        1
     sky130_fd_sc_hd__nor3_4         1
     sky130_fd_sc_hd__o21ai_2        4
     sky130_fd_sc_hd__o21ai_4        1
     sky130_fd_sc_hd__o21ba_2        7
     sky130_fd_sc_hd__o221ai_2       1
     sky130_fd_sc_hd__o22a_2        38
     sky130_fd_sc_hd__o22a_4         2
     sky130_fd_sc_hd__o2bb2a_2       2
     sky130_fd_sc_hd__o32a_2        10
     sky130_fd_sc_hd__or2_2         32
     sky130_fd_sc_hd__or2_4         14
     sky130_fd_sc_hd__or2b_2         2
     sky130_fd_sc_hd__or3_2          2
     sky130_fd_sc_hd__or4_2          3
     sky130_fd_sc_hd__or4_4          1

   Chip area for module '\dvsd_8216m9': 2955.334400

30. Executing Verilog backend.
Dumping module `\dvsd_8216m9'.

Warnings: 16 unique messages, 16 total
End of script. Logfile hash: f86b77c283, CPU: user 1.27s system 0.07s, MEM: 44.50 MB peak
Yosys 0.9+4052 (git sha1 d061b0e, gcc 8.3.1 -fPIC -Os)
Time spent: 60% 2x abc (1 sec), 16% 4x stat (0 sec), ...
